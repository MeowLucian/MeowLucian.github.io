{"pages":[{"title":"404 錯誤 (404 Error)","text":"","link":"/404.html"},{"title":"關於 (About)","text":"Naming the blog as Brain Garden to record my life and research. Author IntroductionHi there, I’m Lucian. Shih-An (Lucian) has nearly 3+ years’ experience (2019-2022) as a senior software engineer and focuses on FWA/CPE type 4G/5G home router embedded system product. He implemented business customised software functions for modem module and supported the teams cross B.U. (Wifi, QA team …etc) and global colleague groups. From the passing years’ effort, Shih-An has been rewarded as “2021 Outstanding Employees of THE YEAR” which got 22 staffs selected out of 2,000+ employees per year based on the best technical support for customers and collaboration with team members. Work Experience Experienced with broadband FWA/CPE type product based on Qualcomm modem chipset SDX55/SDX65 platform. Developed APIs via Qualcomm QMI/DCI interface to get modem status related info, such as present connection PLMN, band info, ARFCN, bandwidth, RSRP, RSRQ, SIM info ICCID, IMSI … etc for customized apps and WebGUI. Maintain each project’s modem configure feature settings for specific customer operator (setting preferred band, LTE/NR RAT preference, RF calibration settings … etc) and implement WNC specific CRUD (Create, Read, Update and Delete) mechanisms and OTA (upgrade Over-The-Air) for modem software config NV (non-volatile) items/EFS files. Familiar with 4G/5G Test Equipment (simulator callbox) included Keysight 7515 A/B, Anritsu MT8000A, Amarisoft LTE-100 to test 4G (LTE), 5G (FR1/FR2) with parameters settings and end-to-end throughput verification test by iperf. Customer/FAE field trial issue debugging support, included modem (WNC customized apps) log collecting/analysing. 3GPP GCF certification support experience. (DEKRA, Taiwan). Network protocol knowledges, such as TCP/IP, ICMP, IPv4/IPv6, DHCP, Route … etc. Linux driver and kernel debugging experience included collecting logs/ramdump, analysing/fixing modem crash issue and verifying modem subsystem restart (SSR) function … etc. Setup build server with essential toolchains; Release and maintain SW/FW included merging Qualcomm SDK, porting opensource code and implementing WNC customised applications. Program Skills C Git Linux commands / shell script Bitbake cross compiler toolchain based on openembedded yocto project for Linux OS ARM based chipset NDK toolchain for Android based platform product Language Skills Mandarin : Native English : Medium (NEW TOEIC : 750) Japanese : Medium (JLPT : N3) Education M.S. Degree, Department of Communication Engineering, National Central University# GPA: 4.15/4.3# Thesis: “Full-Duplex Decode-and-Forward Relay Systems Utilizing Software-Defined Radio: From Prototyping, Implementation to Experiments” in Proc. National Symposium on Telecommunications (NST), 2019. (Best Paper Award in application field) B.S. Degree, 2012.06 - 2016.09, Department of Electrical Engineering, National United University H.S. Degree, 2009.09 - 2012.06, Science student, National Hsinchu Senior High School Contact Blog GitHub Linkedin Facebook Email : Meow.Lucian@gmail.com","link":"/about/index.html"},{"title":"網站導覽列表 (Web List)","text":"程式設計 (Programming) C 程式設計 (C Programming) C++ 程式設計 (C++ Programming) GCC 教學 (GCC Tutorial) Linux 教學 (Linux Tutorial) Git 教學 (Git Tutorial)","link":"/list/index.html"}],"posts":[{"title":"C++ 教學 (C++ Tutorial)","text":"C++ 教學與筆記。 基礎 (Basic)資料型態與變數 (Datatype and Variable) 輸入輸出 (Input Output) 運算 (Operation) 型態轉換 (Type Conversion) 物件導向 (Object Oriented Programming, OOP)建立物件與類別 命名空間 (Namespace) 建構式 &amp; 解構式 (Constructor, Destructor) 物件指標 (Object Pointer) 封裝 (Encapsulation) Friend 函式 (Friend Function) 標準模板庫 (Standard Template Library, STL)STL 常用容器 STL 簡介 (STL Introduction) 向量容器 (Vector) 執行緒 (Thread) 執行緒基礎 (Thread Basic) 時間 (Time) 計時基礎 (Time Basic)","link":"/C++-Tutorial/"},{"title":"C 教學 (C Tutorial)","text":"C 教學與筆記。 基礎 (Basic)資料型態與變數 (Datatype and Variable) define 巨集 (define Macro) 字面常數 (Literal Constant) Const 關鍵字 (Const Keyword) Static 關鍵字 (Static Keyword) Extern 關鍵字 (Extern Keyword) 宣告 &amp; 定義 (Declaration, Definition) 運算 (Operation) 邏輯、位元、位移運算 (Logical, Bitwise, Shift) 型態轉換 (Type Casting) 流程控制 (Control Flow) if 條件判斷 (if Statement) 進階資料型態 (Advanced Data Types, ADP)字串 (String) 字元陣列 (Char Array) 字串函式 (String Function) 數字字串型態轉換 (String Num Type Conversion) 指標 (Pointer) 傳值、傳址、傳參考 (Call by Value, Address, Reference) 指標的指標 (Pointer of Pointer) Void 指標 (Void Pointer) 字元陣列指標 (Char Array Pointer) 字元指標 (Char Pointer) 函式指標 (Function Pointer) 資料結構與演算法 (Data Structures and Algorithms) 搜尋 (Search) 排序 (Sort) 連結串列 (Linked list) 面試常見程式 (Common Program)數值 (Numeric) 數字反轉 (Reverse Number) 最大公因數 (Greatest Common Divisor) 質數 (Prime) 費氏數列 (Fibonacci) quickBitcount 十進位轉二進位 (Dec to Bin) bitwise-operation 字串 (String) strlen 實作 (strlen Implementation) strchr 實作 (strchr Implementation)] strrev 實作 (strrev Implementation) 字串交換 (Swap String) 指標 (Pointer) ++p, p++ 連結串列 (Linked list) Delete last n node LeetCode (LeetCode) Two sum Max subarray Merge Two Sorted Lists","link":"/C-Tutorial/"},{"title":"變更 PowerPoint 投影片的匯出解析度 (Change PowerPoint Export Resolution)","text":"設定 Microsoft Office PowerPoint 匯出解析度。 PowerPoint 並無內建修改解析度的功能，需要修改登錄碼來達成。 變更匯出的解析度設定 按一下 開始，然後按一下 執行。 輸入 regedit。 以 PowerPoint 2016 為例： 需要找到 1HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\PowerPoint\\Options 按一下 選項 子機碼，指向 編輯 功能表上的 新增，再按一下 DWORD 值。 輸入 ExportBitmapResolution，然後再按 Enter 鍵。 選取 ExportBitmapResolution，然後再按一下 編輯 功能表上的 修改。 在 編輯 DWORD 值 對話方塊中，按一下 十進位。 輸入想要的解析度值，以下為參數表格： 十進位值 全螢幕像素 寬螢幕像素 每英吋點數 50 500 × 375 667 × 375 50 dpi 96 (預設值) 960 × 720 1280 × 720 96 dpi 100 1000 × 750 1333 × 750 100 dpi 150 1500 × 1125 2000 × 1125 150 dpi 200 2000 × 1500 2667 × 1500 200 dpi 250 2500 × 1875 3333 × 1875 250 dpi 300 3000 × 2250 4000 × 2250 300 dpi 數值越大解析度越高，但須注意檔案是否會過大。 我目前的設定是 200，供大家參考。 Reference如何變更 PowerPoint 投影片的匯出解析度","link":"/Change-PowerPoint-Export-Resolution/"},{"title":"Chrome 擴充功能 (Chrome Extension)","text":"分享各種實用的 Chrome 擴充插件。 擋廣告類 uBlock Origin Pop up blocker No Coin DuckDuckGo Privacy Essentials 搜尋類 Image Search Options QuickMark QR Code Extension 下載類 Free Download Manager Enable Copy HappyGet 2 百度網盤不限速下載 儲存至 Google 雲端硬碟 語言輔助類 rikaikun 下載網路字典發音 網路權限類 Unblock Boundary Sad Panda Touch VPN Unlimited Free VPN - Hola 腳本插件Tampermonkey 插件主網站 AdsBypasser","link":"/Chrome-Extension/"},{"title":"Chrome 截取完整網頁畫面 (Chrome Screenshot)","text":"使用 Chrome 內建功能擷取完整長條網頁 開啟 Chrome 網頁開發介面按下 F12 開啟網頁開發介面 開啟指令視窗按下 Ctrl + Shift + P 開啟指令視窗 輸入截圖指令輸入 Capture full size screenshot 指令後截圖","link":"/Chrome-Screenshot/"},{"title":"Fix anydesk Ubuntu 22.04 not works issue","text":"Fix anydesk Ubuntu 22.04 not works issue note. Install anydeskDownload Anydesk from official website 1sudo dpkg -i ./anydesk_*_amd64.deb Install libpangoxAfter installing AnyDesk but it’s not running and get error :libpangox-1.0.so.0: cannot open shared object file: No such file or directory install libpangox by below command : 123wget http://ftp.us.debian.org/debian/pool/main/p/pangox-compat/libpangox-1.0-0_0.0.2-5.1_amd64.debsudo apt install ./libpangox-1.0-0_0.0.2-5.1_amd64.deb Fix display server errorAnyDesk could run now but it’s still can’t be connected and get error :Status: display_server_not_supported 1sudo vim /etc/gdm3/custom.conf Apply below patch : 12345678910 [daemon] # Uncomment the line below to force the login screen to use Xorg-#WaylandEnable=false+WaylandEnable=false # Enabling automatic login-#AutomaticLoginEnable = true-#AutomaticLogin = user1+AutomaticLoginEnable = true+AutomaticLogin = $USERNAME Reboot PC one time and anydesk works.","link":"/Fix-anydesk-Ubuntu-22-04/"},{"title":"第一篇文章 (First Post)","text":"今天終於有機會學習使用 Hexo + Github page 完成自己動手寫 Blog 的夢想。 之後會更進一步學習網站前後端相關的應用。 將此 Blog 當成日常瑣事的紀錄，以保留日漸消失的記憶。 預祝未來研究生活順利， 1, January, 2018 是值得紀念的一刻。","link":"/First-Post/"},{"title":"GCC &amp;&amp; Makefile 教學 (GCC &amp;&amp; Makefile Tutorial)","text":"GCC 和 Makefile 教學與筆記。 說明GNU 編譯器套裝 (GNU Compiler Collection, GCC) 安裝 MinGW (Install MinGW)指令列表 (Command List)語法 ： gcc [option] filename option 功能 指令 查看版本 --version 只做編譯、不做連結 -c 指定輸出檔名 -o filename 基礎編譯 (Basic Compiling)C Example 單一文件編譯：12gcc -c main.cgcc -o test main.c C++ Example 單一文件編譯：12g++ -c main.cppg++ -o test main.cpp 進階基礎編譯 (Advance Compiling) GCC 編譯多個文件 (GCC Multiple File Compilation) Makefile","link":"/GCC-Tutorial/"},{"title":"Git 教學 (Git Tutorial)","text":"git 教學與筆記。 Basic settings1234567891011git --versiongit config --global user.name MeowLuciangit config --global user.email Meow.Lucian@gmail.comgit config --listgit config --global --editgit config --global core.editor &quot;vim&quot;git config --global --unset core.editorgit config --global --add safe.directory '*'http.&quot;https://chipmaster2.qti.qualcomm.com&quot;.followRedirects true Init1git init ssh-key1234cd ~/.sshssh-keygencat id_rsa.pubGitlab -&gt; Profile Settings -&gt; SSH Keys -&gt; 貼上 Clone12345git clone -b &quot;&lt;specific branch&gt;&quot; --single-branch &quot;&lt;git repository url&gt;&quot; &quot;&lt;local folder name&gt;&quot;# Undo --single-branch clonegit config remote.origin.fetch &quot;+refs/heads/*:refs/remotes/origin/*&quot;git fetch origin Add12git add &quot;&lt;file&gt;&quot;git add -f . Status1git status . Commit12git commit -m &quot;&lt;commit name&gt;&quot;git commit --amend Patch123git format-patch -1 &lt;commit&gt; -o ~/test_code/patch # 從包含 &lt;commit&gt; 往前算共 1 個 commitgit format-patch -1 &lt;commit&gt; -o ~/ -- &quot;&lt;folder&gt;&quot; # 只包含某 &lt;folder&gt; 的變化git am test.patch Cherry-pick1git cherry-pick &quot;&lt;commit ID&gt;&quot;..&quot;&lt;commit ID&gt;&quot; # (注意第一個編號要是前一個commit) Log123456789git loggit log &quot;&lt;file&gt;&quot;git log -p &quot;&lt;file&gt;&quot;git log --all -p &quot;&lt;file&gt;&quot; # Find from all branchsgit log --oneline -2git log --pretty=&quot;PIC:%an, %s&quot;git log --grep &quot;test&quot;git log --statgit log --author=Lucian Show123git show &quot;&lt;commit&gt;&quot; --statgit show --pretty=&quot;&quot; --name-only &quot;&lt;commit&gt;&quot;git show &quot;&lt;commit&gt;&quot;:&quot;&lt;file&gt;&quot; Diff1234git diff &quot;&lt;commit&gt;&quot; &quot;&lt;commit&gt;&quot;git diff --statgit diff --staged &quot;&lt;file&gt;&quot;git diff --name-only . grep12git ls-files | fgrep &quot;test.c&quot;git grep -n -i --files-with-matches &quot;&lt;text&gt;&quot; Checkout1git checkout &quot;&lt;file&gt;&quot; Reset1234567891011121314git reset HEAD --hard# 還原到前一個commitgit reset HEAD^# 還原到前二個commitgit reset HEAD^^# 還原到前二個commitgit reset HEAD~2git reset HEAD &quot;&lt;file&gt;&quot;git reset &quot;&lt;commit&gt;&quot; &quot;&lt;file&gt;&quot; # reset a specific file to a specific revision Clean1git clean -f -d Branch12345678910git branch -agit checkout &quot;&lt;new branch name&gt;&quot;git branch -b &quot;&lt;new branch name&gt;&quot; &quot;&lt;started commit ID&gt;&quot;git branch --contains &quot;&lt;commit&gt;&quot; # find branch with specific commit# Find &lt;commit&gt; in all branchesgit branch -a --contains &lt;commit&gt;# Delete branchgit branch -d &quot;&lt;branch name&gt;&quot; Merge1git merge &quot;&lt;branch name&gt;&quot; Remote123456git remote -vgit remote add &quot;&lt;local nickname&gt;&quot; &quot;&lt;git repository url&gt;&quot;# Localgit remote add TEST /build/lucian/Project/testgit remote remove origin Push12git push &quot;&lt;remote&gt;&quot; &quot;&lt;commit SHA&gt;&quot;:&quot;&lt;remote branch&gt;&quot;git push origin 19cbe78:master Fetch1git fetch origin Pull1git pull Rebase123456789101112git rebase -i &quot;&lt;commit&gt;&quot;pick &quot;&lt;commit_1&gt;&quot;reword &quot;&lt;commit_2&gt;&quot; # Change commit namepick &quot;&lt;commit_3&gt;&quot;s &quot;&lt;commit_4&gt;&quot; # Squashedit &quot;&lt;commit_5&gt;&quot; # Rebase interactive mode# Change Commit Author Name examplegit commit --amend --author=&quot;MeowLucian &lt;Meow.lucian@gmail.com&gt;&quot; --no-editgit rebase --continue Tag123456git taggit tag -lgit tag -ngit tag &quot;&lt;tag ID&gt;&quot; # Add new taggit tag -d &quot;&lt;tag ID&gt;&quot; # Delete taggit tag -am &quot;&lt;tag comment&gt;&quot; &quot;&lt;tag ID&gt;&quot; Stash 封存123456789git add .git stash save 'stash 1'git stash listgit stash pop stash@{0}git stash dropgit stash clear Gerrit1234git review -Rcat ~/.ssh/config (必須存在)User 19002347 Share the codehttps://gist.github.com/ Upgrade to latest git version123456(option) sudo rm -rf /usr/share/ca-certificates(option) sudo apt-get --reinstall install ca-certificatessudo add-apt-repository ppa:git-core/ppa -ysudo apt-get updatesudo apt-get install git -y","link":"/Git-Tutorial/"},{"title":"Google 雲端硬碟外連 Url 並下載 (Google Drive Url &amp;&amp; Download)","text":"找出 Google 雲端硬碟的資料外連網址 Url 並下載。 找出外連網址 (適用 100M size 以下檔案)開啟共用後，網址由以下組成： https://drive.google.com/file/d/id/view?usp=sharing 其中 id 為33個英文+數字符號等組成。 將網址改成以下： https://drive.google.com/uc?export=download&amp;id=id 即可將雲端資料使用於個人網頁、部落格顯示。 gdownInstallation1234pip install gdown# to upgradepip install --upgrade gdown 安裝過程可能會遇到 No module named setuptools 只要再安裝 python-setuptools 1sudo apt-get install -y python-setuptools Usage command1gdown `id` [gdown github webpage]","link":"/Google-Drive-Url/"},{"title":"課程教學成果發表 (Learning Outcomes Presentation)","text":"行動寬頻尖端技術人才培育計畫全程成果發表會。 時間 : 2018/01/23 (二) 地點 : 國立臺灣大學博理館101演講廳 (台北市大安區羅斯福路4段1號) 擔任中央大學 106-1 學期課程MIMO 無線通訊之課程助教，並參加課程教學成果發表會。 課程中使用軟體定義無線電 Software Defined Radio (SDR) 平台完成基本通訊以及 MIMO 等相關技術實驗。 包括 : Analog AM Modulation, Demodulation Single Carrier QPSK Transceiver 1x2 MRC Transceiver MIMO Zero-forcing Transceiver MIMO MMSE Transceiver MIMO QR-SIC Transceiver MIMO OFDM Transceiver 發表會照片台大側門 發表會大型看板 當天展示之海報 + Demo 海報大圖 SDR 平台 Demo Demo GUI 大圖基於 802.11n 架構之收發機 Demo 詳細資訊請連結我的 Github","link":"/Learning-Outcomes-Presentation/"},{"title":"Hexo 教學 (Hexo Tutorial)","text":"Hexo 使用教學與客製化主題分享。 安裝需求 Node.js Git 安裝Hexo12sudo apt install npmsudo npm install hexo-cli -g 建立 Hexo 基本檔案123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install icarus 主題預設主題1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 客製化主題1git clone https://github.com/MeowLucian/MeowLucian.github.io_Hexo_Theme.git themes/icarus 更新當原作者更新功能時，將自己客製化異動的檔案暫時使用stash 封存。 12git add .git stash save 'stash 1' 查詢目前有哪些 stash。 1git stash list 再將原作者 remote 的新資料 pull 下來。 1git pull 之後再將 stash 的資料 apply 或 pop 回來。 1git stash pop stash@{0} 外掛 hexo-deployer-git : deploy 上傳 1npm install hexo-deployer-git --save Json-content : 用於站內搜尋功能 1npm install -S hexo-generator-json-content Sitemap : 用於產生網站地圖關鍵字功能 1npm install hexo-generator-sitemap --save hexo-hide-posts : 隱藏特定文章 1npm install hexo-hide-posts --save 設定主題編輯根目錄下的 _config.yml 1theme: icarus 文章封面圖7:3 比例呈現 網址連結編輯根目錄下的 _config.yml Github Page 發佈 :1url: https://&lt;yourname&gt;.github.io 正式發佈 :1url: http://brain-garden.tw/ 404 頁面將index.md和404 資料夾放在主題的source 文件夾下就行了。注意在 Local 本地端測不出來；但發布在 github 上後就可以正常讀取了。 123|-- source| |-- 404| | `-- index.md 執行指令產生 about 頁面1hexo new page about 使用 Hexo 產生靜態檔案1hexo g 開啟 Server1hexo s -p 3600 -p : 連接埠設定 瀏覽網頁 http://localhost:3600/ Deploy 到 Github1hexo clean &amp;&amp; hexo d Git 已取消使用密碼登入，故需要使用 SSH token 方式上傳Github 右上角個人 Icon -&gt; settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token Note 欄位可隨便命名，基本上有個意義就好 Expiration 強烈建議不要改為永久，可設定一個月，並頻繁使用 權限部分因為只有用 blog，權限不須太大 最後編輯根目錄下的 _config.yml 加入 token: 關鍵字 Hexo token 說明頁面 產生 Sitemap 到根目錄的 _config.yml 中的 # Site 分類底下添加 : 12sitemap: path: sitemap.xml 輸入 https://localhost:3600/sitemap.xml，查看所產生的 sitemap。 完成後同樣將 # Site 分類底下 keywords 添加關鍵字 : 1keywords: 最後別忘了在 Google Search Console 提交剛剛所產生的 Sitemap 資訊 : 註解個人放置網頁的 Repository 上有特殊檔案不會自動產生，請不要刪除或被更新的網頁覆蓋掉 README.md : Github Repository 說明檔案 CNAME : 網站轉址檔案 googleccd03104bd8b0cd5.html : Google Search Console 驗證檔案","link":"/Hexo-Tutorial/"},{"title":"Linux 教學 (Linux Tutorial)","text":"Linux 教學與筆記。 指令 (Command)基礎 (Basic) fg tmux head &amp;&amp; tail ts (timestamp input) write (send message by shell) 檔案操作 (File / Directory Operation) tar","link":"/Linux-Tutorial/"},{"title":"Mathtype 符號顯示方框錯誤修正 (Mathtype Display Error)","text":"公式編輯器 Mathtype 中一些符號顯示方框亂碼，該如何解決呢？ 出現這個問題的原因是 Windows 中的 mtextra.ttf 顯示為 MT Extra (TrueType) 字體文件不存在或版本太低所導致。 解決方法 查看 Windows 文件夾下的 fonts 中是否有 mtextra.ttf 顯示為 MT Extra (TrueType)，找到後刪除。 在 Mathtype 文件夾下 MathType\\Fonts\\TrueType 中找到 mtextra.ttf，複製到 Windows 下的 fonts 文件夾內即可。 Mathtype 轉換成 Latex 語法 功能列 -&gt; Preferences -&gt; Translators File 下面的兩個選項不要選擇，在轉化時會多出很多訊息，對於公式編譯本身沒有關係。 Ctrl + C 複製公式後貼至 Latex 編輯器即可。","link":"/Mathtype-Display-Error/"},{"title":"列印解析度 Dpi 設定 (Printing Dpi Setting)","text":"設定 Microsoft Office 輸出 PDF 檔之印刷解析度(Dpi)。 開啟 Word 列印介面點選 Adobe pdf，點選印表機內容 預設高品質 dpi點選高品質列印或點選編輯設定更詳細內容 自訂 dpi","link":"/Printing-Dpi-Setting/"},{"title":"QT 入門教學 (QT Get Started Tutorial)","text":"QT 入門教學與筆記。 Install QTInstall QT Components首先安裝必要的 QT 組件，以下 Visual Studio 2017 為例： 如有 64 bit 的開發需求，請務必勾選。 其他功能依使用需求勾選。 Install Visual Studio QT Extension Tools工具列 -&gt; Tools -&gt; Extensions and Updates -&gt; Online 搜尋 QT 後，就可看到 QT Visual Studio Tools 並安裝它。 或到 Visual Studio Marketplace 直接下載安裝檔安裝。 Qt Visual Studio Tools Setting工具列 -&gt; Qt VS Tools -&gt; Qt Options -&gt; Add 設定預設的 QT 安裝位置 C:\\Qt\\5.12.3\\msvc2017_64。 Get StartedAdd New QT Project工具列 -&gt; File -&gt; New -&gt; Project 已經預設 Core、Gui、Widgets 等基礎功能，目前先不另外勾選其他功能。 Execution按 F5 即可執行，結果如下： Fix Execution Error 如果遇到缺少 dll 檔而無法執行程式的話，解決方法如下： 如果 exe 檔不用發佈，可以在系統環境變量添加路徑，點擊我的電腦右鍵-&gt;內容-&gt;系統及安全性-&gt;進階系統設定-&gt;環境變數-&gt;Path-&gt;編輯。以我為例，在最後面添加 C:\\Qt\\5.12.3\\msvc2017_64\\bin 後按確定，實際添加內容要看個人的 Qt 版本及安裝位置。 如果要發佈給別人使用，到個人的 Qt 安裝目錄下的 bin 資料夾，這邊的位置在 C:\\Qt\\5.12.3\\msvc2017_64\\bin 內，複製缺少的 dll 檔放置於 exe 檔旁，持續運行並添加其他缺少的 dll 檔，這邊一共複製了以下 9 個 dll 檔才啟動成功。","link":"/QT-Get-Started-Tutorial/"},{"title":"Qnap Nas 安裝 Virtio (Qnap Nas Virtio)","text":"在 Nas 主機中安裝虛擬機器(Virtual Machine) 後發現 Nas 的主系統磁碟與虛擬機磁碟之間的傳輸速度不高，可使用 Virtio 的方法解決。 傳輸速度的疑難雜症由於在虛擬機器安裝一個 Windows 的作業系統，所以 Qnap 的主 Linux 作業系統與虛擬出來的 Windows 作業系統在橋接(Bridge) 模式下，兩系統為獨立個體，透過各自的實體 IP 出去再由路由器交換資料、來達到互相傳輸的功能。 此方式為安裝虛擬機後預設配置，交換資料是透過兩個階段而不是直接在 Nas 裡的硬體磁碟交換資料，以致於傳輸速度較低。 可在 Qnap 的網路與虛擬交換機頁面中查看目前網路硬體配置，如下圖所示： 何謂 Virtio在 Kernel-based Virtual Machine(KVM) 架構下， Virtio 是用來虛擬 I/O 裝置的主要平台。透過應用程式介面讓主系統與虛擬機溝通而不需再透過實體網路。 Virtio 驅動下載 For Windows : Fedora Project Wiki 點選 Stable virtio-win iso。 安裝步驟 虛擬工作站頁面 -&gt; 設定 -&gt; 網路 -&gt; 型別 -&gt; 改成 Virtio 儲存空間 -&gt; 新增裝置 有別於 Windows 虛擬主磁碟的預設 IDE 介面；這裡我們要新增一個 Virtio 介面的虛擬副磁碟，以便載入剛剛下載的 Virtio 驅動程式。 介面 -&gt; Virtio 這裡的容量大小不重要，設置為最小 1 GB 即可。 CD /DVD 頁面 -&gt; 載入剛剛下載的驅動程式路徑 進入 Windows 虛擬機 -&gt; 裝置管理員 發現有幾個 Virtio 裝置尚未安裝。 右鍵更新驅動 -&gt; 瀏覽電腦上的驅動程式軟體 點選剛剛新增的虛擬光碟機檔案 記得點選包含子資料夾給它搜尋。 確認安裝 個別點選並更新驅動 確認所有都安裝完成後，會看到硬體都可辨識成功。 回到虛擬工作站頁面 -&gt; 儲存空間 -&gt; X 驅動安裝完成後，將虛擬 Windows 關閉，並將虛擬主磁碟的介面由原本的 IDE 改成 Virtio。 剛剛新增的虛擬副磁碟已不再需要，所以可以把它刪除。 移除虛擬副磁碟 映像檔也不再需要，可以一併刪除。 移除虛擬光碟機裝置 新增的虛擬光碟機也不再需要，可以一併刪除。 確認移除裝置 結語大功告成，現在 Nas 的主系統磁碟應該與虛擬機執行的 Windows 磁碟之間有 Virtio 介面做連接，可有較快的交換資料速度。","link":"/Qnap-Nas-Virtio/"},{"title":"新耳機 SONY MDR-1A (SONY MDR-1A)","text":"SONY 大降價，原本快 10K 的耳機直接打 4 折。 剛好缺一個封閉式的耳機，所以覺得很值得亂花錢 (哈哈~ 目前還尚未完全 RUN 開 總體而言它的低音飽滿、中高頻都很清楚，是款不錯的耳機 推薦給大家囉 ! 外殼 內盒 耳機美照 耳機 + 攜行袋","link":"/SONY-MDR-1A/"},{"title":"Visual Studio 教學 (Visual Studio Tutorial)","text":"Visual Studio 使用教學與筆記。 快捷鍵 F5 : 執行 F9 : 放置中斷點 (Breakpoint) F10 : 單步執行 (Step Over) F11 : 逐步執行 (Step Into) Ctrl + K + C : 多行註解 Ctrl + K + U : 多行取消註解 各式功能設定編譯 C++要編譯 Cpp 檔案需要添加 pch.h 標頭檔 1#include &quot;pch.h&quot; 跑完程式自動關閉Options -&gt; Debugging -&gt; General -&gt; Automatically close the console when debugging stops 除錯 (Debugger)有分三種模式： 逐步執行 (Step Into)遇到子函數就進入並且繼續單步執行。 單步執行 (Step Over)不會進入子函數內逐步執行，而是將子函數整個執行完再停止，也就是把子函數整個作為一步。 跳步執行 (Step Out)執行完子函數餘下部分，跳出子函數並返回到上一層函數。 除錯監看視窗 (Debug Window)按 F11 逐步執行 (Step Into)，Debug -&gt; Windows -&gt; Memory -&gt; Memory1 或按快捷鍵 Ctrl + Alt + M 再按 1。 int 範例1234567891011#include &quot;pch.h&quot;#include &lt;iostream&gt;using namespace std;int main() { int a[] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 }; cout &lt;&lt; a &lt;&lt; endl; system(&quot;pause&quot;); return 0;} 顯示陣列位址從 0x003CFBFC 開始，並為連續記憶體配置。 int 所占大小為 4 bytes，所以 Columns 設為 4，較適合監看。 記憶體使用 16 位元進制來顯示。 char 範例123456789101112#include &quot;pch.h&quot;#include &lt;iostream&gt;using namespace std;int main() { char a[] = {&quot;ABCabc&quot;}; cout &lt;&lt; &amp;a &lt;&lt; endl; cout &lt;&lt; a &lt;&lt; endl; system(&quot;pause&quot;); return 0;} 顯示陣列位址從 0x003EFA24 開始，並為連續記憶體配置。 char 所占大小為 1 bytes，所以 Columns 設為 1，較適合監看。記憶體使用 16 位元進制來顯示。 Power Mode 外掛此插件可使程式撰寫時擁有更多樂趣。 Download Extension: LiamMorrow version BigEgg version","link":"/Visual-Studio-Tutorial/"},{"title":"為網頁加上 SSL 憑證 (Webpage with SSL)","text":"由於 Github Pages 對自有域名不提供 SSL 證書，所以使用 CloudFlare 服務將網頁加上免費的 SSL 憑證。 SSL 原理大致上來說 User 與 Server 進行溝通時會經過第三方 Cloudflare 進行加密認證，使機密資訊不再以明文來傳送。 Github Page 設定新增 CNAME 檔案並填入自己購買的網域名稱，讓它自動導向所指定的網站。例如：Brain-Garden.tw。注意：前面不需要加 http://。 CloudFlare 設定首先要有 CloudFlare 的帳號，免費註冊。 新增網站域名 登入後，會出現 Add your site 頁面，輸入自己註冊的帳號，例如：Brain-Garden.tw。注意：前面不需要加 http://。 自動新增 DNS 紀錄 點擊 Add site 按鈕後，會出現 We’re querying your DNS records 頁面，點擊 Next 按鈕。 選擇方案 這裡我們選擇免費的方案，當然如果有更多經濟能力的人，可以升級成月費方案，功能更多。 添加 Cloudflare Nameservers Cloudflare 會提供給你兩組 Cloudflare Nameservers 來進行設定，每個人所獲得的名稱可能不一樣。 “網路中文”網域註冊網站設定到網域註冊網站(此例是”網路中文”)的 DNS 頁面添加 Cloudflare Nameservers。 備註：”網路中文”設定 Nameservers 時需要這兩個 server 的實際 IP 位址，而 Cloudflare 沒有給，所以自己去搜尋了一下，jeff 和 molly 這兩個 IP 位址分別是 173.245.59.124 和 173.245.58.205。 回到 CloudFlare 設定 DNS接著回到 Cloudflare 管理介面 -&gt; DNS 頁面。 加入 4 筆 Type 為 A，Name 為 @，IP 分別為 185.199.108.153、185.199.109.153、185.199.110.153、185.199.111.153。 加入 1 筆 Type 為 CNAME，Name 為 www，IP 為 brain-garden.tw，功能是不論網址前面有無輸入 www 都會導向 brain-garden.tw。 回到 Cloudflare 管理介面 -&gt; Crypto 頁面。 SSL 認證的形式選擇默認的 Flexible 即可。 另外可將頁面滑至下方 Always Use HTTPS 設定開啟，可將連結強制導向 HTTPS，增加安全認證。 大功告成，靜待大約 30 分鐘等待網站解析生效。 可回到 Overview 頁面確認有無 Active、同時 Cloudflare 也會寄一封完成設定的通知信。 SSL 憑證確認瀏覽個人網站，確認是否有綠色小鎖，即是完成 SSL 認證。 若無，可使用 Chrome 在個人網站頁面中按下 F12 進入管理人員介面，點選 Security，檢查是否認證成功，它會告訴你哪裡有外連且沒有 SSL 憑證的 http 網址，並嘗試修改它即可。","link":"/Webpage-with-SSL/"},{"title":"git version 2.36.1 - fatal unsafe repository","text":"解決 git version 2.36.1 - fatal unsafe repository issue issue 說明自從更新 git version 2.36.1 後，由於新增一些 security 機制，導致 fetch code issue出現 : fatal: unsafe repository ('repository path' is owned by someone else) 解法新增以下 git config 1git config --global --add safe.directory '*'","link":"/git-fetch-issue/"},{"title":"gnu cflow 教學 (gnu cflow tutorial)","text":"gnu cflow 教學與筆記。 Get startedOfficial manual webpage Download source codeOfficial download webpage 12wget https://ftp.gnu.org/gnu/cflow/cflow-latest.tar.gztar -xvf cflow-latest.tar.gz Build source code解壓縮後裡面有 INSTALL 文字檔案說明如何 build 1234cd &lt;cflow folder&gt;./configuremakesudo make install 使用方式如果需要畫圖功能，還需要安裝 graphviz 1sudo apt install graphviz 官網範例 12345678910111213141516171819202122232425262728/* whoami.c - a simple implementation of whoami utility */#include &lt;pwd.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int who_am_i(void) { struct passwd *pw; char *user = NULL; pw = getpwuid(geteuid()); if(pw) user = pw-&gt;pw_name; else if((user = getenv(&quot;USER&quot;)) == NULL) { fprintf(stderr, &quot;I don't know!\\n&quot;); return 1; } printf(&quot;%s\\n&quot;, user); return 0;}int main(int argc, char **argv) { if (argc &gt; 1) { fprintf(stderr, &quot;usage: whoami\\n&quot;); return 1; } return who_am_i();} 產生 pdf 檔 1cflow -f dot whoami.c | dot -Tpdf -o ~/Desktop/cflow_example.pdf 結果圖","link":"/gnu-cflow/"}],"tags":[{"name":"Code","slug":"Code","link":"/tags/Code/"},{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"C","slug":"C","link":"/tags/C/"},{"name":"Dpi","slug":"Dpi","link":"/tags/Dpi/"},{"name":"Office","slug":"Office","link":"/tags/Office/"},{"name":"Web","slug":"Web","link":"/tags/Web/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"anydesk","slug":"anydesk","link":"/tags/anydesk/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"GCC","slug":"GCC","link":"/tags/GCC/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"Drive","slug":"Drive","link":"/tags/Drive/"},{"name":"Url","slug":"Url","link":"/tags/Url/"},{"name":"SDR","slug":"SDR","link":"/tags/SDR/"},{"name":"MIMO","slug":"MIMO","link":"/tags/MIMO/"},{"name":"Mathtype","slug":"Mathtype","link":"/tags/Mathtype/"},{"name":"QT","slug":"QT","link":"/tags/QT/"},{"name":"Nas","slug":"Nas","link":"/tags/Nas/"},{"name":"Headphone","slug":"Headphone","link":"/tags/Headphone/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"},{"name":"cflow","slug":"cflow","link":"/tags/cflow/"}],"categories":[{"name":"Learning-Note-學習筆記","slug":"Learning-Note-學習筆記","link":"/categories/Learning-Note-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"},{"name":"Lift-生活","slug":"Lift-生活","link":"/categories/Lift-%E7%94%9F%E6%B4%BB/"}]}